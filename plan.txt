# Todo App Plan

## 1. Goal
Create a simple, single-user Kanban-style todo application that runs entirely in the web browser.

## 2. Core Features
-   **Columns:** Fixed columns representing task stages (e.g., ToDo, In Progress, Testing, Done).
-   **Task Creation:** Input field and button to add new tasks to the "ToDo" column.
-   **Drag & Drop:**
    -   Move tasks between columns.
    -   Reorder tasks within the same column for prioritization (top = highest priority).
    -   Drag tasks to a dedicated "Trash" area to delete them.
-   **Persistence:** Save the state of tasks (content, column, order) in the browser's Local Storage.
-   **Styling:** Dark theme, modern, and simplistic visual design.
-   **Visual Feedback:** Clear indicators during drag-and-drop operations (e.g., highlighting potential drop zones).

## 3. Technology Stack
-   **HTML:** Structure the application layout (columns, task input, trash area).
-   **CSS:** Style the elements, implement the dark theme, and provide visual feedback for interactions.
-   **Vanilla JavaScript:** Handle all application logic:
    -   Task data management (creating, updating, deleting).
    -   Rendering tasks to the DOM.
    -   Implementing drag-and-drop functionality using the native HTML Drag and Drop API.
    -   Saving and loading task data from Local Storage.

## 4. File Structure
-   `index.html`: Main HTML file.
-   `style.css`: CSS styles.
-   `script.js`: JavaScript logic.

## 5. JavaScript Logic Outline
-   **Data Structure:** An array of task objects, e.g., `[{ id: 'uniqueId', title: 'Task Title', column: 'col-todo', order: 0 }, ...]`.
-   **Persistence Functions:** `saveTasksToLocalStorage(tasks)`, `loadTasksFromLocalStorage()`.
-   **Rendering Function:** `renderTasks(tasks)`: Clears existing tasks and redraws them in the correct columns and order based on the `tasks` array.
-   **Add Task Logic:** Event listener on the add button/form submission; creates a new task object, adds it to the data array, saves, and calls `renderTasks`.
-   **Drag and Drop Handling:**
    -   Add `draggable="true"` to task elements.
    -   Implement event listeners (`dragstart`, `dragenter`, `dragover`, `dragleave`, `drop`, `dragend`) on tasks, columns, and the trash area.
    -   `dragstart`: Record the ID of the dragged task, add visual cues.
    -   `dragover`: `preventDefault()` to allow dropping, highlight potential drop zones (columns, between tasks, trash).
    -   `drop`: `preventDefault()`, determine target (column, position within column, or trash), update the task's `column` and `order` in the data array (or remove if dropped on trash), save changes, and call `renderTasks`.
    -   `dragend`: Remove visual cues.
-   **Initialization:** On script load, call `loadTasksFromLocalStorage` and then `renderTasks` to display any saved tasks.

## 6. Nice-to-Haves (If time permits)
-   Animations for smoother transitions.
-   Edit task text functionality. 